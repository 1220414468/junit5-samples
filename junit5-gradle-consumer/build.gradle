apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: JUnit5Plugin

jar {
	baseName = 'junit5-gradle-consumer'
	version = '1.0.0-SNAPSHOT'
}

ext.junit5Version = '5.0.0-SNAPSHOT'
ext.junit4Version = '4.12'

repositories {
	mavenCentral()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	options.compilerArgs += '-parameters'
}

dependencies {
	testCompile("org.junit.prototype:junit5-api:${junit5Version}")
	testRuntime("org.junit.prototype:junit-console:${junit5Version}")
	testRuntime("org.junit.prototype:junit5-engine:${junit5Version}")

	// If you also want JUnit4 tests
	testCompile("junit:junit:${junit4Version}")
	testRuntime("org.junit.prototype:junit4-engine:${junit5Version}")
}

configurations.all {
	// Do NOT cache JUnit 5 snapshot JARs.
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


eclipse {
	classpath {
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.8'
}

class JUnit5Plugin implements Plugin<Project> {
	void apply(Project project) {
		project.task('test', type: org.gradle.api.tasks.JavaExec, overwrite: true) { task->
			task.description = 'Runs JUnit 5 tests.'
			task.classpath = project.sourceSets.test.runtimeClasspath
			task.main = 'org.junit.gen5.console.ConsoleRunner'
			task.args '--enable-exit-code', 'com.example.project'
		}
	}
}

