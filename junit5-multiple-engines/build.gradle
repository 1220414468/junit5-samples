plugins {
    id 'java'
    id 'eclipse' // optional (to generate Eclipse project files)
    id 'idea' // optional (to generate IntelliJ IDEA project files)
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'
}

repositories {
    mavenCentral()
    jcenter() // needed for "Spek2"
}

dependencies {
    def junit4Version = '4.12'
    def junit5Version = '5.3.2'

    // Using multiple engines in a single project may lead to different JUnit
    // Platform artifact versions being pulled in via transitive dependencies.
    // Gradle allows you to enforce usage of fixed set of versions that match.
    // https://docs.gradle.org/current/userguide/managing_transitive_dependencies.html#sec:bom_import
    implementation(enforcedPlatform("org.junit:junit-bom:${junit5Version}")) {
        because 'enforce matching Platform, Jupiter, and Vintage versions'
    }

    // JUnit Jupiter
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine') {
        because 'allows JUnit 5 (read Jupiter) tests to run'
    }

    // JUnit Vintage
    testImplementation("junit:junit:${junit4Version}")
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine') {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }

    // JUnit Platform Launcher + Console
    testRuntimeOnly('org.junit.platform:junit-platform-launcher') {
        because 'allows tests to run from IDEs that bundle older version of launcher'
    }
    testRuntimeOnly('org.junit.platform:junit-platform-console') {
        because 'needed to launch the JUnit Platform Console program'
    }

    // Mainrunner
    testImplementation("de.sormuras.mainrunner:mainrunner:1.1.0") {
        because 'executes Java programs as tests, contains dedicated Java 8 and 11 implementations'
    }

    // jqwik
    testImplementation('net.jqwik:jqwik:1.0.0') {
        because 'allows jqwik properties to run'
    }

    // Spek2
    testImplementation('org.spekframework.spek2:spek-dsl-jvm:2.0.0-rc.1')
    testImplementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.11') // TODO Why is this needed?
    testRuntimeOnly('org.spekframework.spek2:spek-runner-junit5:2.0.0-rc.1') {
        because 'allows Spek2 tests to be found and executed'
    }

    // KotlinTest
    testImplementation('io.kotlintest:kotlintest-runner-junit5:3.2.0')
    testRuntimeOnly('org.slf4j:slf4j-nop:1.7.25') {
        because 'defaulting to no-operation (NOP) logger implementation'
    }
}

task consoleLauncherTest(type: JavaExec) {
    dependsOn testClasses
    def reportsDir = file("$buildDir/test-results")
    outputs.dir reportsDir
    classpath sourceSets.test.runtimeClasspath
    main 'org.junit.platform.console.ConsoleLauncher'
    args '--scan-classpath'
    args '--details', 'tree'
    args '--reports-dir', reportsDir
}

test {
    // useJUnitPlatform() ... https://github.com/gradle/gradle/issues/4912
    dependsOn consoleLauncherTest
    exclude '**/*'
}
